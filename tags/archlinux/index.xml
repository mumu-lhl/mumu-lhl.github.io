<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Archlinux on Mumulhl's Blog</title><link>https://mumulhl.eu.org/tags/archlinux/</link><description>Recent content in Archlinux on Mumulhl's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Mumulhl</copyright><lastBuildDate>Thu, 25 Jul 2024 19:54:02 +0800</lastBuildDate><atom:link href="https://mumulhl.eu.org/tags/archlinux/index.xml" rel="self" type="application/rss+xml"/><item><title>PKGBUILD 编写、发布、自动更新教程</title><link>https://mumulhl.eu.org/p/pkgbuild-tutorial/</link><pubDate>Thu, 25 Jul 2024 19:54:02 +0800</pubDate><guid>https://mumulhl.eu.org/p/pkgbuild-tutorial/</guid><description>&lt;h2 id="概念">概念
&lt;/h2>&lt;h3 id="pkgbuild">PKGBUILD
&lt;/h3>&lt;p>PKGBUILD 文件采用 Bash 语法，用于 Archlinux 及其衍生发行版构建软件包，用户可以将自己编写的 PKGBUILD 发布到 &lt;a class="link" href="https://aur.archlinux.org" target="_blank" rel="noopener"
>AUR(Arch User Repository)&lt;/a>，让其他用户构建并安装软件包（通常由工具完成，如 yay、paru）。&lt;/p>
&lt;p>编写 PKGBUILD 只需要 Bash 的 &lt;strong>创建变量&lt;/strong>、&lt;strong>读取变量&lt;/strong>、&lt;strong>声明函数&lt;/strong>、&lt;strong>创建数组&lt;/strong> 等少量知识即可，可以到 &lt;a class="link" href="https://wangdoc.com/bash/" target="_blank" rel="noopener"
>网道 WangDoc&lt;/a> 学习。&lt;/p>
&lt;h3 id="makepkg">makepkg
&lt;/h3>&lt;p>读取 PKGBUILD 构建软件包的工具。&lt;/p>
&lt;h2 id="辅助工具">辅助工具
&lt;/h2>&lt;p>这些工具在后文会介绍具体，请先用 pacman 安装，可以简化 PKGBUILD 的维护：&lt;/p>
&lt;ul>
&lt;li>devtools - 包含的 pkgctl&lt;/li>
&lt;li>nvchecker - 为 pkgctl 提供版本检测&lt;/li>
&lt;li>namcap - 检测 PKGBUILD 常见的错误&lt;/li>
&lt;li>updpkgsums - 自动下载软件来源，计算 hash 填入 PKGBUILD（不用另外安装）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo pacman -S devtools nvchecker namcap
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些工具你可能需要（不要的话关系也不大），使用自行看其文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/termux/termux-language-server" target="_blank" rel="noopener"
>termux-language-server&lt;/a> - 为 PKGBUILD 提供语言服务器（Language Server）&lt;/li>
&lt;/ul>
&lt;h2 id="基本格式">基本格式
&lt;/h2>&lt;p>你可以在 &lt;code>/usr/share/pacman&lt;/code> 目录下找到三个没有注释的 PKGBUILD 示例文件，其中 PKGBUILD.pro 应该是最有用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># https://wiki.archlinux.org/title/Arch_package_guidelines&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Maintainer: Your Name &amp;lt;youremail@domain.com&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pkgname&lt;/span>&lt;span class="o">=&lt;/span>NAME &lt;span class="c1"># 名称&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pkgver&lt;/span>&lt;span class="o">=&lt;/span>VERSION &lt;span class="c1"># 版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pkgrel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="c1"># 通常为 1，不需要更改，当版本不变需要让用户重新安装软件包时&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#（如 PKGBUILD 增加补丁、修复 bug），需要加 1。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pkgdesc&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># 介绍&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">arch&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 适用的架构，如 x86_64、aarch64、i386，也可以是 any，表示软件不受架构限制&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># 软件主页链接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">license&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;GPL&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># 许可证&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">groups&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 归属的软件包组，基本用不到&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">depends&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 软件运行所需的依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">makedepends&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 构建软件所需的依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">optdepends&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;package_name: description&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 软件运行可选的依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">provides&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 提供的功能&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">conflicts&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 与什么功能冲突，通常与 provides 的值相同&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">replaces&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 该包安装时替换什么包，基本用不到&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">backup&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 该包安装或卸载时，要备份的文件的路径，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 使用相对路径（如 etc/pacman.conf），通常是配置文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 小知识：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 升级时包自带的要备份的文件将会以 .pacnew 后缀保存，不覆盖本地的；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 卸载时本地的要备份的文件会以 .pacsave 后缀重新命名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">options&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># makepkg 选项，具体参数在&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># https://man.archlinux.org/man/PKGBUILD.5#OPTIONS_AND_DIRECTIVES&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">changelog&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="c1"># 软件更新日志，基本都不写的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">source&lt;/span>&lt;span class="o">=(&lt;/span>FILENAME::URL&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 不定构架，软件来源（可以是压缩文件，也可以是 git 仓库地址，写法见下面的 git 示例），&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># FILENAME 用于将下载到的文件命名为它，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 可以用上面定义的变量组成，如 $pkgname-$pkgver.tar.gz&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># makepkg 会自动解压，解压后的目录存于变量 srcdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># URL 则是指向文件的链接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#source=(URL) # FILENAME 也可以省略&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#source_x86_64 # 相应架构的软件来源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">noextract&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 需要其他解压工具时，不解压的软件来源，填写这一项需要在 prepare 函数中解压文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 还要在 makedepends 填写解压工具&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sha256sums&lt;/span>&lt;span class="o">=()&lt;/span> &lt;span class="c1"># 不定架构的软件来源的 hash，下文将介绍用 updpkgsums 自动填写，也可以用其他的 hash，如 sha512&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#sha256sums_x86_64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 特定架构的软件来源的 hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pkgver 函数用于获取软件版本，替代 pkgver 变量，通常用于打包直接用 git 拉取仓库进行构建的软件包&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#pkgver() {}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># prepare 函数准备软件构建，在 build 函数前执行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#prepare() {}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># build 函数构建软件，在 package 函数前执行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#build() {}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># package 函数安装软件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">package&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 安装二进制文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 工作步骤：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 将一个文件复制到另一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 2. 赋予复制后的文件可执行权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> install -Dm755 &lt;span class="si">${&lt;/span>&lt;span class="nv">srcdir&lt;/span>&lt;span class="si">}&lt;/span>/binary &lt;span class="si">${&lt;/span>&lt;span class="nv">pkgdir&lt;/span>&lt;span class="si">}&lt;/span>/usr/bin/binary &lt;span class="c1"># srcdir 变量是软件来源解压后的目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># pkgdir 变量是一个存放被打包的文件的目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="自动填写-hash">自动填写 hash
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">updpkgsums
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="示例">示例
&lt;/h2>&lt;p>请根据自己要打包的软件选择示例，也可以直接跳到 &lt;a class="link" href="#%e5%8f%91%e5%b8%83" >如何发布&lt;/a>。&lt;/p>
&lt;h3 id="二进制">二进制
&lt;/h3>&lt;p>见 &lt;a class="link" href="#%e5%9f%ba%e6%9c%ac%e6%a0%bc%e5%bc%8f" >基本格式&lt;/a>&lt;/p>
&lt;h3 id="git-从仓库拉取构建">git 从仓库拉取构建
&lt;/h3>&lt;p>只写出一些与打包二进制的不同的地方。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pkgname&lt;/span>&lt;span class="o">=&lt;/span>NAME-git &lt;span class="c1"># 名称应该以 -git 结尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">pkgver&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="c1"># 先随便填个版本进去，等下构建时 makepkg 会自动填写 pkgver 函数生成的版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sha256sums&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;SKIP&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1"># 因为拉取最新的仓库所以无法指定 hash，直接跳过检查 hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">source&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;git+https://URL&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pkgver &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 从 git 仓库生成软件版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 其他实现见: https://wiki.archlinux.org/title/VCS_package_guidelines#Git&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$pkgname&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span> &lt;span class="nb">set&lt;/span> -o pipefail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git describe --long --abbrev&lt;span class="o">=&lt;/span>&lt;span class="m">7&lt;/span> 2&amp;gt;/dev/null &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/\([^-]*-g\)/r\1/;s/-/./g&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;r%s.%s&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git rev-list --count HEAD&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git rev-parse --short&lt;span class="o">=&lt;/span>&lt;span class="m">7&lt;/span> HEAD&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="其他">其他
&lt;/h3>&lt;p>如 pip、npm、cargo 等编程语言的软件包的打包是不需要手写 PKGBUILD 的，用脚本生成就可以了，见 &lt;a class="link" href="https://wiki.archlinux.org/title/Creating_packages#PKGBUILD_generators" target="_blank" rel="noopener"
>Arch Wiki&lt;/a>。&lt;/p>
&lt;h2 id="测试">测试
&lt;/h2>&lt;h3 id="构建">构建
&lt;/h3>&lt;p>写完 PKGBUILD 最好测试一下能否正常构建软件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">makepkg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是最简单的测试方法，但有个问题，因为安装了很多包，系统是不“干净”的，如果 PKGBUILD 中有依赖没写上去，也会正常构建，为了避免这种情况，可以用 pkgctl 构建。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pkgctl build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>pkgctl 会自动在一个“干净”的 chroot 里下载安装依赖并构建软件。而且还会生成 &lt;code>.SRCINFO&lt;/code> 文件，这是发布至 AUR 必须要有的文件。&lt;/p>
&lt;h3 id="安装">安装
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">makepkg --install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="发布">发布
&lt;/h2>&lt;p>如果测试没问题的话就可以发布了。首先的首先，你需要一个 AUR 账号，这个步骤很简单，就不写了。&lt;/p>
&lt;h3 id="验证">验证
&lt;/h3>&lt;p>创建 AUR 专用的 SSH 密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">ssh-keygen -f ~/.ssh/aur
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>~/.ssh/config&lt;/code> 中加入这些内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Host aur.archlinux.org
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IdentityFile ~/.ssh/aur
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User aur
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后在 AUR 账号的设置页面加入 &lt;code>~/.ssh/aur.pub&lt;/code> 里的公钥就好了。&lt;/p>
&lt;h3 id="生成-srcinfo-文件">生成 &lt;code>.SRCINFO&lt;/code> 文件
&lt;/h3>&lt;p>如果不是用 pkgctl 测试构建软件包，那么需要这条命令生成 &lt;code>.SRCINFO&lt;/code> 文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">makepkg --printsrcinfo &amp;gt; .SRCINFO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建包仓库">创建包仓库
&lt;/h3>&lt;p>AUR 只接受 master 分支的推送。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果还没有 git 仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git -c init.defaultbranch&lt;span class="o">=&lt;/span>master clone ssh://aur@aur.archlinux.org/pkgbase.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果已有 git 仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git switch -c master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 如果有了提交&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="推送">推送
&lt;/h3>&lt;p>这一步不用我多说吧 :)&lt;/p>
&lt;h2 id="自动更新">自动更新
&lt;/h2>&lt;p>根据 PKGBUILD 生成自动更新的配置 &lt;code>.nvchecker.toml&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pkgctl version setup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新 PKGBUILD 中的 pkgver：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pkgctl version upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再用 updpkgsums 自动填写 hash，非常的完美！&lt;/p>
&lt;h2 id="日常维护">日常维护
&lt;/h2>&lt;p>当你维护一大堆包的时候，显然一个个去更新太慢了。可以把所有包的仓库放在一个目录下，再在这个目录下执行这条命令一次性更新所有包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pkgctl version &lt;span class="k">$(&lt;/span>ls&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果哪个包被更新了，要手动去构建一下，然后提交推送，避免出问题。这个任务不算很难，毕竟一下子也不会有很多包更新。&lt;/p>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>这篇文章写起来超费时间，比写三篇小短文的总时间还要多 :(&lt;/p>
&lt;p>因为找不到 PKGBUILD 编写、发布、自动更新一体化的教程，所以就自己写啰。&lt;/p>
&lt;p>这篇文章介绍编写的 PKGBUILD 比较简单，不是很完整，剩下就是下一篇文章的事了 :)&lt;/p></description></item></channel></rss>